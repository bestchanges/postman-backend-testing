{
	"info": {
		"_postman_id": "a4361e5a-5025-4fdd-8c9e-41bb7527a21d",
		"name": "postman-backend-testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Todolist",
			"item": [
				{
					"name": "list todolists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9510dbaf-ca89-4dd4-a33d-976081da7e7a",
								"exec": [
									"pm.test('Schema is valid', function() {",
									"    var jsonData = pm.response.json();",
									"    tv4.validate(jsonData, schemaArrayOf(entitySchema));",
									"    if (tv4.error) {",
									"        pm.expect(tv4.error.message).to.be.empty();",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/lists",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"lists"
							]
						}
					},
					"response": []
				},
				{
					"name": "create todolist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6440798a-beff-4b07-82d7-390a9def734c",
								"exec": [
									"pm.environment.set(\"todolist_id\", \"\");",
									"",
									"pm.test(\"Have id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"    pm.environment.set(\"todolist_id\", jsonData.id);",
									"});",
									"",
									"pm.test('Schema is valid', function() {",
									"    var jsonData = pm.response.json();",
									"    tv4.validate(jsonData, entitySchema);",
									"    if (tv4.error) {",
									"        pm.expect(tv4.error.message).to.be.empty();",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{todolist_name}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/lists",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"lists"
							]
						}
					},
					"response": []
				},
				{
					"name": "todolist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b9502741-f3f3-43e8-b61d-addc1ae4368b",
								"exec": [
									"pm.test(\"Have id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"});",
									"",
									"pm.test(\"id equals requested\", function () {",
									"    var jsonData = pm.response.json();",
									"    expected_value = pm.environment.get(\"todolist_id\");",
									"    pm.expect(jsonData.id).to.be.equals(expected_value);",
									"});",
									"",
									"pm.test('Schema is valid', function() {",
									"    var jsonData = pm.response.json();",
									"    tv4.validate(jsonData, entitySchema);",
									"    if (tv4.error) {",
									"        pm.expect(tv4.error.message).to.be.empty();",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/lists/{{todolist_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"lists",
								"{{todolist_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update todolist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aae54e3c-6c3e-4af7-82ec-db3a0b0d6d02",
								"exec": [
									"pm.test(\"Have id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"});",
									"",
									"pm.test(\"id equals requested\", function () {",
									"    var jsonData = pm.response.json();",
									"    expected_value = pm.environment.get(\"todolist_id\");",
									"    pm.expect(jsonData.id).to.be.equals(expected_value);",
									"});",
									"",
									"pm.test('Schema is valid', function() {",
									"    var jsonData = pm.response.json();",
									"    tv4.validate(jsonData, entitySchema);",
									"    if (tv4.error) {",
									"        pm.expect(tv4.error.message).to.be.empty();",
									"    }",
									"});",
									"",
									"postman.setNextRequest(\"list items\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": {{todolist_id}},\n\t\"name\": \"Updated List\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/lists/{{todolist_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"lists",
								"{{todolist_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete todolist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aae54e3c-6c3e-4af7-82ec-db3a0b0d6d02",
								"exec": [
									"pm.test(\"Have id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"});",
									"",
									"pm.test(\"id equals requested\", function () {",
									"    var jsonData = pm.response.json();",
									"    expected_value = pm.environment.get(\"todolist_id\");",
									"    pm.expect(jsonData.id).to.be.equals(expected_value);",
									"});",
									"",
									"pm.test('Schema is valid', function() {",
									"    var jsonData = pm.response.json();",
									"    tv4.validate(jsonData, entitySchema);",
									"    if (tv4.error) {",
									"        pm.expect(tv4.error.message).to.be.empty();",
									"    }",
									"});",
									"",
									"postman.setNextRequest(null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/lists/{{todolist_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"lists",
								"{{todolist_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d6aae39c-c240-49a4-bbf9-130b06c5fb51",
						"type": "text/javascript",
						"exec": [
							"entitySchema =  {",
							"  \"type\": \"object\",",
							"  \"required\": [",
							"    \"id\",",
							"    \"name\"",
							"  ],",
							"  \"properties\": {",
							"    \"id\": {",
							"      \"type\": \"integer\",",
							"    },",
							"    \"name\": {",
							"      \"type\": \"string\",",
							"      \"pattern\": \"^(.*)$\"",
							"    }",
							"  }",
							"};"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7285f8e0-0145-41f2-888a-0188e8d204ab",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Items",
			"item": [
				{
					"name": "list items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2f329b9b-ac57-4e09-a666-eab9088299bd",
								"exec": [
									"pm.test('Schema is valid', function() {",
									"    var jsonData = pm.response.json();",
									"    tv4.validate(jsonData, schemaArrayOf(entitySchema));",
									"    if (tv4.error) {",
									"        pm.expect(tv4.error.message).to.be.empty();",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/lists/{{todolist_id}}/items",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"lists",
								"{{todolist_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "create item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6440798a-beff-4b07-82d7-390a9def734c",
								"exec": [
									"pm.environment.set(\"item_id\", \"\");",
									"",
									"pm.test(\"Have id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"    pm.environment.set(\"item_id\", jsonData.id);",
									"});",
									"",
									"",
									"pm.test('Schema is valid', function() {",
									"    var jsonData = pm.response.json();",
									"    tv4.validate(jsonData, entitySchema);",
									"    if (tv4.error) {",
									"        pm.expect(tv4.error.message).to.be.empty();",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"task\": \"{{task_name}}\",\n\t\"completed\": {{task_is_completed}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/lists/{{todolist_id}}/items",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"lists",
								"{{todolist_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b9502741-f3f3-43e8-b61d-addc1ae4368b",
								"exec": [
									"pm.test(\"Have id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"});",
									"",
									"pm.test(\"id equals requested\", function () {",
									"    var jsonData = pm.response.json();",
									"    expected_value = pm.environment.get(\"item_id\");",
									"    pm.expect(jsonData.id).to.be.equals(expected_value);",
									"});",
									"",
									"pm.test('Schema is valid', function() {",
									"    var jsonData = pm.response.json();",
									"    tv4.validate(jsonData, entitySchema);",
									"    if (tv4.error) {",
									"        pm.expect(tv4.error.message).to.be.empty();",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/lists/{{todolist_id}}/items/{{item_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"lists",
								"{{todolist_id}}",
								"items",
								"{{item_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aae54e3c-6c3e-4af7-82ec-db3a0b0d6d02",
								"exec": [
									"pm.test(\"Have id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"});",
									"",
									"pm.test(\"id equals requested\", function () {",
									"    var jsonData = pm.response.json();",
									"    expected_value = pm.environment.get(\"item_id\");",
									"    pm.expect(jsonData.id).to.be.equals(expected_value);",
									"});",
									"",
									"",
									"pm.test('Schema is valid', function() {",
									"    var jsonData = pm.response.json();",
									"    tv4.validate(jsonData, entitySchema);",
									"    if (tv4.error) {",
									"        pm.expect(tv4.error.message).to.be.empty();",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": {{item_id}},\n\t\"task\": \"Updated task\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/lists/{{todolist_id}}/items/{{item_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"lists",
								"{{todolist_id}}",
								"items",
								"{{item_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aae54e3c-6c3e-4af7-82ec-db3a0b0d6d02",
								"exec": [
									"",
									"pm.test(\"Have id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"});",
									"",
									"pm.test(\"id equals requested\", function () {",
									"    var jsonData = pm.response.json();",
									"    expected_value = pm.environment.get(\"item_id\");",
									"    pm.expect(jsonData.id).to.be.equals(expected_value);",
									"});",
									"",
									"pm.test('Schema is valid', function() {",
									"    var jsonData = pm.response.json();",
									"    tv4.validate(jsonData, entitySchema);",
									"    if (tv4.error) {",
									"        pm.expect(tv4.error.message).to.be.empty();",
									"    }",
									"});",
									"",
									"postman.setNextRequest(\"delete todolist\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/lists/{{todolist_id}}/items/{{item_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"lists",
								"{{todolist_id}}",
								"items",
								"{{item_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9c011332-aeec-497a-b404-b478c1db9427",
						"type": "text/javascript",
						"exec": [
							"entitySchema =  {",
							"  \"type\": \"object\",",
							"  \"required\": [",
							"    \"id\",",
							"    \"task\",",
							"    \"completed\"",
							"  ],",
							"  \"properties\": {",
							"    \"id\": {",
							"      \"type\": \"integer\",",
							"    },",
							"    \"task\": {",
							"      \"type\": \"string\",",
							"      \"pattern\": \"^(.*)$\",",
							"      \"minLength\": 1",
							"    },",
							"    \"completed\": {",
							"      \"type\": \"boolean\",",
							"    },",
							"  }",
							"};"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7a73cfb6-fd00-464b-ae2c-b382bb1fce21",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e017cc10-2645-4b2c-9172-fc71246d9d32",
				"type": "text/javascript",
				"exec": [
					"schemaArrayOf = function(entitySchema) {",
					"    return  {",
					"      \"type\": \"array\",",
					"      \"items\": entitySchema",
					"    };",
					"};",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "94d83da5-6df3-4e12-b7db-ae54bb156e68",
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});",
					"",
					"pm.test(\"Return value is JSON\", function () {",
					"    pm.response.to.be.json;",
					"});",
					"",
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "354190b3-b3b9-4ee9-8f71-7ce9f444fb05",
			"key": "server_url",
			"value": "http://localhost:8807",
			"type": "string"
		},
		{
			"id": "84260155-7c37-4b81-9edf-45ce28d90492",
			"key": "todolist_name",
			"value": "Default todolist",
			"type": "string"
		},
		{
			"id": "197ecab5-42e9-4fb6-9ec4-f7fbccd3ea4a",
			"key": "task_name",
			"value": "default task",
			"type": "string"
		},
		{
			"id": "a7ae1c11-fa2e-4566-8589-92501b975045",
			"key": "task_is_completed",
			"value": "false",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}